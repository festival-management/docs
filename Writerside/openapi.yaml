openapi: "3.1.0"
info:
  title: "FestivalBackend"
  version: "0.1.0"
paths:
  /auth/token/:
    post:
      tags:
        - "auth"
      summary: "Login"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginItem"
        required: "true"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /auth/register/:
    post:
      tags:
        - "auth"
      summary: "Register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterItem"
        required: "true"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /roles/:
    post:
      tags:
        - "roles"
      summary: "Create Role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleItem"
        required: "true"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRoleResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "roles"
      summary: "Get Roles"
      parameters:
        - name: "offset"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "0"
            title: "Offset"
        - name: "limit"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "null"
            title: "Limit"
        - name: "only_name"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Only Name"
        - name: "can_order"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Can Order"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRolesResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /roles/{role_id}:
    delete:
      tags:
        - "roles"
      summary: "Delete Role"
      parameters:
        - name: "role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Role Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "roles"
      summary: "Get Role"
      parameters:
        - name: "role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Role Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoleResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /roles/{role_id}/permissions:
    put:
      tags:
        - "roles"
      summary: "Update Role Permissions"
      parameters:
        - name: "role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Role Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRolePermissionsItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /roles/{role_id}/name:
    put:
      tags:
        - "roles"
      summary: "Update Role Name"
      parameters:
        - name: "role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Role Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /roles/{role_id}/paper_size:
    put:
      tags:
        - "roles"
      summary: "Update Role Paper Size"
      parameters:
        - name: "role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Role Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRolePaperSizeItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /users/{user_id}:
    delete:
      tags:
        - "users"
      summary: "Delete User"
      parameters:
        - name: "user_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "User Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "users"
      summary: "Get User"
      parameters:
        - name: "user_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "User Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /users/:
    get:
      tags:
        - "users"
      summary: "Get Users"
      parameters:
        - name: "offset"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "0"
            title: "Offset"
        - name: "limit"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "100"
            title: "Limit"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /users/{user_id}/password:
    put:
      tags:
        - "users"
      summary: "Update User Password"
      parameters:
        - name: "user_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "User Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPasswordItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /users/{user_id}/name:
    put:
      tags:
        - "users"
      summary: "Update User Name"
      parameters:
        - name: "user_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "User Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /users/{user_id}/role:
    put:
      tags:
        - "users"
      summary: "Update User Role"
      parameters:
        - name: "user_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "User Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRoleItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  # Subcategories
  /subcategories/:
    post:
      tags:
        - "subcategories"
      summary: "Create Subcategory"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubcategoryItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSubcategoryResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "subcategories"
      summary: "Get Subcategories"
      parameters:
        - name: "offset"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "0"
            title: "Offset"
        - name: "limit"
          in: "query"
          required: "false"
          schema:
            anyOf:
              - type: "integer"
              - type: "null"
            title: "Limit"
        - name: "only_name"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Only Name"
        - name: "order_by"
          in: "query"
          required: "false"
          schema:
            type: "string"
            title: "Order By"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSubcategoriesResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /subcategories/{subcategory_id}:
    delete:
      tags:
        - "subcategories"
      summary: "Delete Subcategory"
      parameters:
        - name: "subcategory_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Subcategory Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "subcategories"
      summary: "Get Subcategory"
      parameters:
        - name: "subcategory_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Subcategory Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSubcategoryResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /subcategories/{subcategory_id}/name:
    put:
      tags:
        - "subcategories"
      summary: "Update Subcategory Name"
      parameters:
        - name: "subcategory_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Subcategory Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubcategoryNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /subcategories/{subcategory_id}/order:
    put:
      tags:
        - "subcategories"
      summary: "Update Subcategory Order"
      parameters:
        - name: "subcategory_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Subcategory Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubcategoryOrderItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  # Products
  /products/{product_id}/date:
    post:
      tags:
        - "products"
      summary: "Add Product Date"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductDateItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddProductDateResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/ingredient:
    post:
      tags:
        - "products"
      summary: "Add Product Ingredient"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductIngredientItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddProductIngredientResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/role:
    post:
      tags:
        - "products"
      summary: "Add Product Role"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductRoleItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddProductRoleResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/variant:
    post:
      tags:
        - "products"
      summary: "Add Product Variant"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductVariantItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddProductVariantResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/:
    post:
      tags:
        - "products"
      summary: "Create Product"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateProductResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "products"
      summary: "Get Products"
      parameters:
        - name: "offset"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "0"
            title: "Offset"
        - name: "limit"
          in: "query"
          required: "false"
          schema:
            anyOf:
              - type: "integer"
              - type: "null"
            title: "Limit"
        - name: "only_name"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Only Name"
        - name: "order_by"
          in: "query"
          required: "false"
          schema:
            type: "string"
            title: "Order By"
        - name: "subcategory_id"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            title: "Subcategory Id"
        - name: "include_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Dates"
        - name: "include_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Ingredients"
        - name: "include_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Roles"
        - name: "include_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Variants"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductsResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}:
    delete:
      tags:
        - "products"
      summary: "Delete Product"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "products"
      summary: "Get Product"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
        - name: "include_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Dates"
        - name: "include_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Ingredients"
        - name: "include_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Roles"
        - name: "include_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Variants"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/date/{product_date_id}:
    delete:
      tags:
        - "products"
      summary: "Delete Product Date"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
        - name: "product_date_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Date Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/ingredient/{product_ingredient_id}:
    delete:
      tags:
        - "products"
      summary: "Delete Product Ingredient"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
        - name: "product_ingredient_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Ingredient Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/role/{product_role_id}:
    delete:
      tags:
        - "products"
      summary: "Delete Product Role"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
        - name: "product_role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Role Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/variant/{product_variant_id}:
    delete:
      tags:
        - "products"
      summary: "Delete Product Variant"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
        - name: "product_variant_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Variant Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/category:
    put:
      tags:
        - "products"
      summary: "Update Product Category"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductCategoryItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/priority:
    put:
      tags:
        - "products"
      summary: "Update Product Is Priority"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductIsPriorityItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/name:
    put:
      tags:
        - "products"
      summary: "Update Product Name"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/price:
    put:
      tags:
        - "products"
      summary: "Update Product Price"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductPriceItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/short_name:
    put:
      tags:
        - "products"
      summary: "Update Product Short Name"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductShortNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /products/{product_id}/subcategory:
    put:
      tags:
        - "products"
      summary: "Update Product Subcategory"
      parameters:
        - name: "product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Product Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductSubcategoryItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  # Menus
  /menus/{menu_id}/date:
    post:
      tags:
        - "menu"
      summary: "Add Menu Date"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMenuDateItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMenuDateResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field:
    post:
      tags:
        - "menu"
      summary: "Add Menu Field"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMenuFieldItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMenuFieldResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}/product:
    post:
      tags:
        - "menu"
      summary: "Add Menu Field Product"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMenuFieldProductItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMenuFieldProductResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/role:
    post:
      tags:
        - "menu"
      summary: "Add Menu Role"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMenuRoleItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMenuRoleResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/:
    post:
      tags:
        - "menu"
      summary: "Create Menu"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMenuItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMenuResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "menu"
      summary: "Get Menus"
      parameters:
        - name: "offset"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "0"
            title: "Offset"
        - name: "limit"
          in: "query"
          required: "false"
          schema:
            anyOf:
              - type: "integer"
              - type: "null"
            title: "Limit"
        - name: "order_by"
          in: "query"
          required: "false"
          schema:
            type: "string"
            title: "Order By"
        - name: "include_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Dates"
        - name: "include_fields"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields"
        - name: "include_fields_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products"
        - name: "include_fields_products_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Dates"
        - name: "include_fields_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Ingredients"
        - name: "include_fields_products_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Roles"
        - name: "include_fields_products_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Variants"
        - name: "include_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Roles"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMenusResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}:
    delete:
      tags:
        - "menu"
      summary: "Delete Menu"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "menu"
      summary: "Get Menu"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "include_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Dates"
        - name: "include_fields"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields"
        - name: "include_fields_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products"
        - name: "include_fields_products_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Dates"
        - name: "include_fields_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Ingredients"
        - name: "include_fields_products_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Roles"
        - name: "include_fields_products_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Fields Products Variants"
        - name: "include_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Roles"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMenuResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/date/{menu_date_id}:
    delete:
      tags:
        - "menu"
      summary: "Delete Menu Date"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_date_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Date Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}:
    delete:
      tags:
        - "menu"
      summary: "Delete Menu Field"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}/product/{menu_field_product_id}:
    delete:
      tags:
        - "menu"
      summary: "Delete Menu Field Product"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
        - name: "menu_field_product_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Product Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/role/{menu_role_id}:
    delete:
      tags:
        - "menu"
      summary: "Delete Menu Role"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_role_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Role Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/products:
    get:
      tags:
        - "menu"
      summary: "Get Menu Products"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "include_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Dates"
        - name: "include_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Ingredients"
        - name: "include_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Roles"
        - name: "include_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Variants"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMenuProductsResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}/additional_cost:
    put:
      tags:
        - "menu"
      summary: "Update Menu Field Additional Cost"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuFieldAdditionalCostItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}/is_optional:
    put:
      tags:
        - "menu"
      summary: "Update Menu Field Is Optional"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuFieldIsOptionalItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}/max_sortable_elements:
    put:
      tags:
        - "menu"
      summary: "Update Menu Field Max Sortable Elements"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuFieldMaxSortableElementsItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/field/{menu_field_id}/name:
    put:
      tags:
        - "menu"
      summary: "Update Menu Field Name"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
        - name: "menu_field_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Field Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuFieldNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/name:
    put:
      tags:
        - "menu"
      summary: "Update Menu Name"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/price:
    put:
      tags:
        - "menu"
      summary: "Update Menu Price"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuPriceItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /menus/{menu_id}/short_name:
    put:
      tags:
        - "menu"
      summary: "Update Menu Short Name"
      parameters:
        - name: "menu_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Menu Id"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuShortNameItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  # Orders
  /orders/:
    post:
      tags:
        - "orders"
      summary: "Create Order"
      requestBody:
        required: "true"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderItem"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrderResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "orders"
      summary: "Get Orders"
      parameters:
        - name: "offset"
          in: "query"
          required: "false"
          schema:
            type: "integer"
            default: "0"
            title: "Offset"
        - name: "limit"
          in: "query"
          required: "false"
          schema:
            anyOf:
              - type: "integer"
              - type: "null"
            title: "Limit"
        - name: "order_by"
          in: "query"
          required: "false"
          schema:
            type: "string"
            title: "Order By"
        - name: "include_menus"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus"
        - name: "include_menus_menu"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu"
        - name: "include_menus_menu_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Dates"
        - name: "include_menus_menu_fields"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields"
        - name: "include_menus_menu_fields_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products"
        - name: "include_menus_menu_fields_products_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Dates"
        - name: "include_menus_menu_fields_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Ingredients"
        - name: "include_menus_menu_fields_products_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Roles"
        - name: "include_menus_menu_fields_products_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Variants"
        - name: "include_menus_menu_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Roles"
        - name: "include_menus_fields"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Fields"
        - name: "include_menus_fields_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Fields Products"
        - name: "include_menus_fields_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Fields Products Ingredients"
        - name: "include_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products"
        - name: "include_products_product"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product"
        - name: "include_products_product_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Dates"
        - name: "include_products_product_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Ingredients"
        - name: "include_products_product_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Roles"
        - name: "include_products_product_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Variants"
        - name: "include_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Ingredients"
        - name: "include_user"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include User"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrdersResponse"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /orders/{order_id}:
    delete:
      tags:
        - "orders"
      summary: "Delete Order"
      parameters:
        - name: "order_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Order Id"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    get:
      tags:
        - "orders"
      summary: "Get Order"
      parameters:
        - name: "order_id"
          in: "path"
          required: "true"
          schema:
            type: "integer"
            title: "Order Id"
        - name: "include_menus"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus"
        - name: "include_menus_menu"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu"
        - name: "include_menus_menu_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Dates"
        - name: "include_menus_menu_fields"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields"
        - name: "include_menus_menu_fields_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products"
        - name: "include_menus_menu_fields_products_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Dates"
        - name: "include_menus_menu_fields_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Ingredients"
        - name: "include_menus_menu_fields_products_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Roles"
        - name: "include_menus_menu_fields_products_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Fields Products Variants"
        - name: "include_menus_menu_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Menu Roles"
        - name: "include_menus_fields"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Fields"
        - name: "include_menus_fields_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Fields Products"
        - name: "include_menus_fields_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Menus Fields Products Ingredients"
        - name: "include_products"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products"
        - name: "include_products_product"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product"
        - name: "include_products_product_dates"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Dates"
        - name: "include_products_product_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Ingredients"
        - name: "include_products_product_roles"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Roles"
        - name: "include_products_product_variants"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Product Variants"
        - name: "include_products_ingredients"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include Products Ingredients"
        - name: "include_user"
          in: "query"
          required: "false"
          schema:
            type: "boolean"
            default: "false"
            title: "Include User"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrderResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        422:
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
components:
  schemas:
    BaseResponse:
      properties:
        error:
          type: "boolean"
          title: "Error"
          default: "false"
        code:
          type: "integer"
          title: "Code"
          default: "0"
        message:
          type: "string"
          title: "Message"
          default: ""
      type: "object"
      title: "BaseResponse"
    PaperSize:
      type: "string"
      enum:
        - "A4"
      const: "A4"
      title: "PaperSize"
    Category:
      type: "string"
      enum:
        - "food"
        - "drink"
      title: "Category"
    User:
      properties:
        id:
          type: "integer"
          title: "Id"
        username:
          type: "string"
          title: "Username"
        role_id:
          type: "integer"
          title: "Role Id"
        created_at:
          type: "string"
          format: "date-time"
          title: "Created At"
      type: "object"
      required:
        - "id"
        - "username"
        - "role_id"
        - "created_at"
      title: "User"
    LoginItem:
      properties:
        grant_type:
          anyOf:
            - type: "string"
              pattern: "password"
            - type: "null"
          title: "Grant Type"
        username:
          type: "string"
          title: "Username"
        password:
          type: "string"
          title: "Password"
        scope:
          type: "string"
          title: "Scope"
          default: ""
        client_id:
          anyOf:
            - type: "string"
            - type: "null"
          title: "Client Id"
        client_secret:
          anyOf:
            - type: "string"
            - type: "null"
          title: "Client Secret"
      type: "object"
      required:
        - "username"
        - "password"
      title: "LoginItem"
    LoginResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            access_token:
              type: "string"
              title: "Access Token"
            token_type:
              type: "string"
              title: "Token Type"
              default: "bearer"
          required:
            - "access_token"
          title: "LoginResponse"
    RegisterItem:
      properties:
        username:
          type: "string"
          title: "Username"
        password:
          type: "string"
          title: "Password"
        role_id:
          type: "integer"
          title: "Role Id"
      type: "object"
      required:
        - "username"
        - "password"
        - "role_id"
    RegisterUserResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            user:
              $ref: "#/components/schemas/User"
          required:
            - "user"
          title: "RegisterUserResponse"
    Role:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "integer"
          title: "Name"
        permissions:
          additionalProperties:
            type: "boolean"
          type: "object"
          title: "Permissions"
        paper_size:
          anyOf:
            - $ref: "#/components/schemas/PaperSize"
            - type: "null"
      type: "object"
      required:
        - "id"
        - "name"
        - "permissions"
        - "paper_size"
      title: "Role"
    RoleName:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "id"
        - "name"
      title: "RoleName"
    CreateRoleItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
    CreateRoleResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            role:
              $ref: "#/components/schemas/Role"
          required:
            - "role"
          title: "CreateRoleResponse"
    GetRoleResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - $ref: "#/components/schemas/Role"
      type: "object"
      title: "GetRoleResponse"
    GetRolesResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            total_count:
              type: "integer"
              title: "Total Count"
            roles:
              type: "array"
              items:
                anyOf:
                  - $ref: "#/components/schemas/Role"
                  - $ref: "#/components/schemas/RoleName"
              title: "Roles"
          required:
            - "total_count"
            - "roles"
          title: "GetRolesResponse"
    UpdateRolePermissionsItem:
      properties:
        permissions:
          additionalProperties:
            type: "boolean"
          type: "object"
          title: "Permissions"
      type: "object"
      required:
        - "permissions"
      title: "UpdateRolePermissionsItem"
    UpdateRoleNameItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
      title: "UpdateRoleNameItem"
    UpdateRolePaperSizeItem:
      properties:
        paper_size:
          $ref: "#/components/schemas/PaperSize"
      type: "object"
      required:
        - "paper_size"
      title: "UpdateRolePaperSizeItem"
    GetUserResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - $ref: "#/components/schemas/User"
          title: "GetUserResponse"
    GetUsersResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            total_count:
              type: "integer"
              title: "Total Count"
            users:
              items:
                $ref: "#/components/schemas/User"
              type: "array"
              title: "Users"
          required:
            - "total_count"
            - "users"
          title: "GetUsersResponse"
    UpdateUserPasswordItem:
      properties:
        password:
          type: "string"
          title: "Password"
      type: "object"
      required:
        - "password"
      title: "UpdateUserPasswordItem"
    UpdateUserNameItem:
      properties:
        username:
          type: "string"
          title: "Username"
      type: "object"
      required:
        - "username"
      title: "UpdateUserNameItem"
    UpdateUserRoleItem:
      properties:
        role_id:
          type: "integer"
          title: "Role Id"
      type: "object"
      required:
        - "role_id"
      title: "UpdateUserRoleItem"
    # Subcategories
    Subcategory:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        order:
          type: "integer"
          title: "Order"
      type: "object"
      required:
        - "id"
        - "name"
        - "order"
      title: "Subcategory"
    SubcategoryName:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "id"
        - "name"
      title: "SubcategoryName"
    CreateSubcategoryItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
      title: "CreateSubcategoryItem"
    CreateSubcategoryResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            subcategory:
              $ref: "#/components/schemas/Subcategory"
          required:
            - "subcategory"
          title: "CreateSubcategoryResponse"
    GetSubcategoriesResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            total_count:
              type: "integer"
              title: "Total Count"
            subcategories:
              items:
                anyOf:
                  - $ref: "#/components/schemas/Subcategory"
                  - $ref: "#/components/schemas/SubcategoryName"
              type: "array"
              title: "Subcategories"
          required:
            - "total_count"
            - "subcategories"
          title: "GetSubcategoriesResponse"
    GetSubcategoryResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - $ref: "#/components/schemas/Subcategory"
      type: "object"
      title: "GetSubcategoryResponse"
    UpdateSubcategoryNameItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
      title: "UpdateSubcategoryNameItem"
    UpdateSubcategoryOrderItem:
      properties:
        order:
          type: "integer"
          title: "Order"
      type: "object"
      required:
        - "order"
      title: "UpdateSubcategoryOrderItem"
    #Products
    ProductDate:
      properties:
        id:
          type: "integer"
          title: "Id"
        start_date:
          type: "string"
          format: "date-time"
          title: "Start Date"
        end_date:
          type: "string"
          format: "date-time"
          title: "End Date"
      type: "object"
      required:
        - "id"
        - "start_date"
        - "end_date"
      title: "ProductDate"
    ProductIngredient:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        price:
          type: "number"
          title: "Price"
      type: "object"
      required:
        - "id"
        - "name"
        - "price"
      title: "ProductIngredient"
    ProductRole:
      properties:
        id:
          type: "integer"
          title: "Id"
        role_id:
          type: "integer"
          title: "Role Id"
      type: "object"
      required:
        - "id"
        - "role_id"
      title: "ProductRole"
    ProductVariant:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        price:
          type: "number"
          title: "Price"
      type: "object"
      required:
        - "id"
        - "name"
        - "price"
      title: "ProductVariant"
    Product:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        short_name:
          type: "string"
          title: "Short Name"
        is_priority:
          type: "boolean"
          title: "Is Priority"
        price:
          type: "number"
          title: "Price"
        category:
          $ref: "#/components/schemas/Category"
        subcategory_id:
          type: "integer"
          title: "Subcategory Id"
        dates:
          items:
            $ref: "#/components/schemas/ProductDate"
          type: "array"
          title: "Dates"
        ingredients:
          items:
            $ref: "#/components/schemas/ProductIngredient"
          type: "array"
          title: "Ingredients"
        roles:
          items:
            $ref: "#/components/schemas/ProductRole"
          type: "array"
          title: "Roles"
        variants:
          items:
            $ref: "#/components/schemas/ProductVariant"
          type: "array"
          title: "Variants"
      type: "object"
      required:
        - "id"
        - "name"
        - "short_name"
        - "is_priority"
        - "price"
        - "category"
        - "subcategory_id"
      title: "Product"
    ProductName:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        short_name:
          type: "string"
          title: "Short Name"
      type: "object"
      required:
        - "id"
        - "name"
        - "short_name"
      title: "ProductName"
    AddProductDateItem:
      properties:
        start_date:
          type: "string"
          format: "date-time"
          title: "Start Date"
        end_date:
          type: "string"
          format: "date-time"
          title: "End Date"
      type: "object"
      required:
        - "start_date"
        - "end_date"
      title: "AddProductDateItem"
    AddProductDateResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            date:
              $ref: "#/components/schemas/ProductDate"
          required:
            - "date"
          title: "AddProductDateResponse"
    AddProductIngredientItem:
      properties:
        name:
          type: "string"
          title: "Name"
        price:
          type: "number"
          minimum: "0"
          title: "Price"
      type: "object"
      required:
        - "name"
        - "price"
      title: "AddProductIngredientItem"
    AddProductIngredientResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            ingredient:
              $ref: "#/components/schemas/ProductIngredient"
          required:
            - "ingredient"
          title: "AddProductIngredientResponse"
    AddProductRoleItem:
      properties:
        role_id:
          type: "integer"
          title: "Role Id"
      type: "object"
      required:
        - "role_id"
      title: "AddProductRoleItem"
    AddProductRoleResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            role:
              $ref: "#/components/schemas/ProductRole"
          required:
            - "role"
          title: "AddProductRoleResponse"
    AddProductVariantItem:
      properties:
        name:
          type: "string"
          title: "Name"
        price:
          type: "number"
          minimum: "0"
          title: "Price"
      type: "object"
      required:
        - "name"
        - "price"
      title: "AddProductVariantItem"
    AddProductVariantResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            variant:
              $ref: "#/components/schemas/ProductVariant"
          required:
            - "variant"
          title: "AddProductVariantResponse"
    CreateProductItem:
      properties:
        name:
          type: "string"
          title: "Name"
        short_name:
          type: "string"
          title: "Short Name"
        price:
          type: "number"
          minimum: "0"
          title: "Price"
        category:
          $ref: "#/components/schemas/Category"
        subcategory_id:
          type: "integer"
          title: "Subcategory Id"
      type: "object"
      required:
        - "name"
        - "short_name"
        - "price"
        - "category"
        - "subcategory_id"
      title: "CreateProductItem"
    CreateProductResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            product:
              $ref: "#/components/schemas/Product"
          required:
            - "product"
          title: "CreateProductResponse"
    GetProductResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - $ref: "#/components/schemas/Product"
      title: "GetProductResponse"
    GetProductsResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            total_count:
              type: "integer"
              title: "Total Count"
            products:
              items:
                anyOf:
                  - $ref: "#/components/schemas/Product"
                  - $ref: "#/components/schemas/ProductName"
              type: "array"
              title: "Products"
          required:
            - "total_count"
            - "products"
          title: "GetProductsResponse"
    UpdateProductCategoryItem:
      properties:
        category:
          $ref: "#/components/schemas/Category"
      type: "object"
      required:
        - "category"
      title: "UpdateProductCategoryItem"
    UpdateProductIsPriorityItem:
      properties:
        is_priority:
          type: "boolean"
          title: "Is Priority"
      type: "object"
      required:
        - "is_priority"
      title: "UpdateProductIsPriorityItem"
    UpdateProductNameItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
      title: "UpdateProductNameItem"
    UpdateProductPriceItem:
      properties:
        price:
          type: "number"
          minimum: "0"
          title: "Price"
      type: "object"
      required:
        - "price"
      title: "UpdateProductPriceItem"
    UpdateProductShortNameItem:
      properties:
        short_name:
          type: "string"
          title: "Short Name"
      type: "object"
      required:
        - "short_name"
      title: "UpdateProductShortNameItem"
    UpdateProductSubcategoryItem:
      properties:
        subcategory_id:
          type: "integer"
          title: "Subcategory Id"
      type: "object"
      required:
        - "subcategory_id"
      title: "UpdateProductSubcategoryItem"
    # Menus
    MenuDate:
      properties:
        id:
          type: "integer"
          title: "Id"
        start_date:
          type: "string"
          format: "date-time"
          title: "Start Date"
        end_date:
          type: "string"
          format: "date-time"
          title: "End Date"
      type: "object"
      required:
        - "id"
        - "start_date"
        - "end_date"
      title: "MenuDate"
    MenuField:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        max_sortable_elements:
          type: "integer"
          title: "Max Sortable Elements"
        additional_cost:
          type: "number"
          title: "Additional Cost"
        is_optional:
          type: "boolean"
          title: "Is Optional"
        products:
          items:
            $ref: "#/components/schemas/MenuFieldProduct"
          type: "array"
          title: "Products"
      type: "object"
      required:
        - "id"
        - "name"
        - "max_sortable_elements"
        - "additional_cost"
        - "is_optional"
      title: "MenuField"
    MenuFieldProduct:
      properties:
        id:
          type: "integer"
          title: "Id"
        price:
          type: "number"
          title: "Price"
        product:
          $ref: "#/components/schemas/Product"
      type: "object"
      required:
        - "id"
        - "price"
        - "product"
      title: "MenuFieldProduct"
    MenuRole:
      properties:
        id:
          type: "integer"
          title: "Id"
        role_id:
          type: "integer"
          title: "Role Id"
      type: "object"
      required:
        - "id"
        - "role_id"
      title: "MenuRole"
    Menu:
      properties:
        id:
          type: "integer"
          title: "Id"
        name:
          type: "string"
          title: "Name"
        short_name:
          type: "string"
          title: "Short Name"
        price:
          type: "number"
          title: "Price"
        dates:
          items:
            $ref: "#/components/schemas/MenuDate"
          type: "array"
          title: "Dates"
        fields:
          items:
            $ref: "#/components/schemas/MenuField"
          type: "array"
          title: "Fields"
        roles:
          items:
            $ref: "#/components/schemas/MenuRole"
          type: "array"
          title: "Roles"
      type: "object"
      required:
        - "id"
        - "name"
        - "short_name"
        - "price"
      title: "Menu"
    AddMenuDateItem:
      properties:
        start_date:
          type: "string"
          format: "date-time"
          title: "Start Date"
        end_date:
          type: "string"
          format: "date-time"
          title: "End Date"
      type: "object"
      required:
        - "start_date"
        - "end_date"
      title: "AddMenuDateItem"
    AddMenuDateResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            date:
              $ref: "#/components/schemas/MenuDate"
          required:
            - "date"
          title: "AddMenuDateResponse"
    AddMenuFieldItem:
      properties:
        name:
          type: "string"
          title: "Name"
        max_sortable_elements:
          type: "integer"
          minimum: "1"
          title: "Max Sortable Elements"
        additional_cost:
          type: "number"
          minimum: "0"
          title: "Additional Cost"
      type: "object"
      required:
        - "name"
        - "max_sortable_elements"
        - "additional_cost"
      title: "AddMenuFieldItem"
    AddMenuFieldResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            field:
              $ref: "#/components/schemas/MenuField"
          required:
            - "field"
          title: "AddMenuFieldResponse"
    AddMenuFieldProductItem:
      properties:
        product_id:
          type: "integer"
          title: "Product Id"
        price:
          type: "number"
          minimum: "0"
          title: "Price"
      type: "object"
      required:
        - "product_id"
        - "price"
      title: "AddMenuFieldProductItem"
    AddMenuFieldProductResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            field_product:
              $ref: "#/components/schemas/MenuFieldProduct"
          required:
            - "field_product"
          title: "AddMenuFieldProductResponse"
    AddMenuRoleItem:
      properties:
        role_id:
          type: "integer"
          title: "Role Id"
      type: "object"
      required:
        - "role_id"
      title: "AddMenuRoleItem"
    AddMenuRoleResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            role:
              $ref: "#/components/schemas/MenuRole"
          required:
            - "role"
          title: "AddMenuRoleResponse"
    CreateMenuItem:
      properties:
        name:
          type: "string"
          title: "Name"
        short_name:
          type: "string"
          title: "Short Name"
        price:
          type: "number"
          minimum: "0"
          title: "Price"
      type: "object"
      required:
        - "name"
        - "short_name"
        - "price"
      title: "CreateMenuItem"
    CreateMenuResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            menu:
              $ref: "#/components/schemas/Menu"
          required:
            - "menu"
          title: "CreateMenuResponse"
    GetMenuResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - $ref: "#/components/schemas/Menu"
      title: "GetMenuResponse"
    GetMenuProductsResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            products:
              items:
                $ref: "#/components/schemas/Product"
              type: "array"
              title: "Products"
          required:
            - "products"
          title: "GetMenuProductsResponse"
    GetMenusResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            total_count:
              type: "integer"
              title: "Total Count"
            menus:
              items:
                $ref: "#/components/schemas/Menu"
              type: "array"
              title: "Menus"
          required:
            - "total_count"
            - "menus"
          title: "GetMenusResponse"
    UpdateMenuFieldAdditionalCostItem:
      properties:
        additional_cost:
          type: "number"
          minimum: "0"
          title: "Additional Cost"
      type: "object"
      required:
        - "additional_cost"
      title: "UpdateMenuFieldAdditionalCostItem"
    UpdateMenuFieldIsOptionalItem:
      properties:
        is_optional:
          type: "boolean"
          title: "Is Optional"
      type: "object"
      required:
        - "is_optional"
      title: "UpdateMenuFieldIsOptionalItem"
    UpdateMenuFieldMaxSortableElementsItem:
      properties:
        max_sortable_elements:
          type: "integer"
          minimum: "1"
          title: "Max Sortable Elements"
      type: "object"
      required:
        - "max_sortable_elements"
      title: "UpdateMenuFieldMaxSortableElementsItem"
    UpdateMenuFieldNameItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
      title: "UpdateMenuFieldNameItem"
    UpdateMenuNameItem:
      properties:
        name:
          type: "string"
          title: "Name"
      type: "object"
      required:
        - "name"
      title: "UpdateMenuNameItem"
    UpdateMenuPriceItem:
      properties:
        price:
          type: "number"
          minimum: "0"
          title: "Price"
      type: "object"
      required:
        - "price"
      title: "UpdateMenuPriceItem"
    UpdateMenuShortNameItem:
      properties:
        short_name:
          type: "string"
          title: "Short Name"
      type: "object"
      required:
        - "short_name"
      title: "UpdateMenuShortNameItem"
    # Orders
    OrderProductIngredient:
      properties:
        id:
          type: "integer"
          title: "Id"
        product_ingredient_id:
          type: "integer"
          title: "Product Ingredient Id"
        quantity:
          type: "integer"
          title: "Quantity"
      type: "object"
      required:
        - "id"
        - "product_ingredient_id"
        - "quantity"
      title: "OrderProductIngredient"
    OrderProduct:
      properties:
        id:
          type: "integer"
          title: "Id"
        product_id:
          type: "integer"
          title: "Product Id"
        price:
          type: "number"
          title: "Price"
        quantity:
          type: "integer"
          title: "Quantity"
        variant_id:
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Variant Id"
        order_menu_field_id:
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Order Menu Field Id"
        product:
          anyOf:
            - $ref: "#/components/schemas/Product"
            - type: "null"
        ingredients:
          items:
            $ref: "#/components/schemas/OrderProductIngredient"
          type: "array"
          default: "[ ]"
          title: "Ingredients"
      type: "object"
      required:
        - "id"
        - "product_id"
        - "price"
        - "quantity"
      title: "OrderProduct"
    OrderMenuField:
      properties:
        id:
          type: "integer"
          title: "Id"
        menu_field_id:
          type: "integer"
          title: "Menu Field Id"
        products:
          items:
            $ref: "#/components/schemas/OrderProduct"
          type: "array"
          default: "[ ]"
          title: "Products"
      type: "object"
      required:
        - "id"
        - "menu_field_id"
      title: "OrderMenuField"
    OrderMenu:
      properties:
        id:
          type: "integer"
          title: "Id"
        price:
          type: "number"
          title: "Price"
        quantity:
          type: "integer"
          title: "Quantity"
        menu:
          anyOf:
            - $ref: "#/components/schemas/Menu"
            - type: "null"
        fields:
          items:
            $ref: "#/components/schemas/OrderMenuField"
          type: "array"
          default: "[ ]"
          title: "Fields"
      type: "object"
      required:
        - "id"
        - "price"
        - "quantity"
      title: "OrderMenu"
    Order:
      properties:
        id:
          type: "integer"
          title: "Id"
        customer:
          type: "string"
          title: "Customer"
        guests:
          anyOf:
            - type: "integer"
              minimum: "1"
            - type: "null"
          title: "Guests"
        is_take_away:
          type: "boolean"
          title: "Is Take Away"
        table:
          anyOf:
            - type: "integer"
              minimum: "1"
            - type: "null"
          title: "Table"
        user:
          anyOf:
            - $ref: "#/components/schemas/User"
            - type: "null"
        menus:
          items:
            $ref: "#/components/schemas/OrderMenu"
          type: "array"
          default: "[ ]"
          title: "Menus"
        products:
          items:
            $ref: "#/components/schemas/OrderProduct"
          type: "array"
          default: "[ ]"
          title: "Products"
        created_at:
          type: "string"
          format: "date-time"
          title: "Created At"
      type: "object"
      required:
        - "id"
        - "customer"
        - "is_take_away"
        - "created_at"
      title: "Order"
    CreateOrderProductIngredientItem:
      properties:
        ingredient_id:
          type: "integer"
          title: "Ingredient Id"
        quantity:
          type: "integer"
          minimum: "1"
          title: "Quantity"
      type: "object"
      required:
        - "ingredient_id"
        - "quantity"
      title: "CreateOrderProductIngredientItem"
    CreateOrderProductItem:
      properties:
        product_id:
          type: "integer"
          title: "Product Id"
        variant_id:
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Variant Id"
        ingredients:
          items:
            $ref: "#/components/schemas/CreateOrderProductIngredientItem"
          type: "array"
          title: "Ingredients"
          default: "[ ]"
        quantity:
          type: "integer"
          minimum: "1"
          title: "Quantity"
      type: "object"
      required:
        - "product_id"
        - "quantity"
      title: "CreateOrderProductItem"
    CreateOrderMenuFieldItem:
      properties:
        menu_field_id:
          type: "integer"
          title: "Menu Field Id"
        products:
          items:
            $ref: "#/components/schemas/CreateOrderProductItem"
          type: "array"
          title: "Products"
      type: "object"
      required:
        - "menu_field_id"
        - "products"
      title: "CreateOrderMenuFieldItem"
    CreateOrderMenuItem:
      properties:
        menu_id:
          type: "integer"
          title: "Menu Id"
        fields:
          items:
            $ref: "#/components/schemas/CreateOrderMenuFieldItem"
          type: "array"
          title: "Fields"
        quantity:
          type: "integer"
          minimum: "1"
          title: "Quantity"
      type: "object"
      required:
        - "menu_id"
        - "fields"
        - "quantity"
      title: "CreateOrderMenuItem"
    CreateOrderItem:
      properties:
        customer:
          type: "string"
          title: "Customer"
        guests:
          anyOf:
            - type: "integer"
              minimum: "1"
            - type: "null"
          title: "Guests"
        is_take_away:
          type: "boolean"
          title: "Is Take Away"
        table:
          anyOf:
            - type: "integer"
              minimum: "1"
            - type: "null"
          title: "Table"
        products:
          items:
            $ref: "#/components/schemas/CreateOrderProductItem"
          type: "array"
          title: "Products"
          default: "[ ]"
        menus:
          items:
            $ref: "#/components/schemas/CreateOrderMenuItem"
          type: "array"
          title: "Menus"
          default: "[ ]"
      type: "object"
      required:
        - "customer"
        - "is_take_away"
      title: "CreateOrderItem"
    CreateOrderResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            order:
              $ref: "#/components/schemas/Order"
          required:
            - "order"
          title: "CreateOrderResponse"
    GetOrderResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - $ref: "#/components/schemas/Order"
      title: "GetOrderResponse"
    GetOrdersResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: "object"
          properties:
            total_count:
              type: "integer"
              title: "Total Count"
            orders:
              items:
                $ref: "#/components/schemas/Order"
              type: "array"
              title: "Orders"
          required:
            - "total_count"
            - "orders"
          title: "GetOrdersResponse"